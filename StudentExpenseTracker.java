/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package za.ac.tut.gui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import za.ac.tut.Expenses;

/**
 *
 * @author Student
 */
public class StudentExpenseTracker extends javax.swing.JFrame {

    List<Expenses> expenses;
    /**
     * Creates new form StudentExpenseTracker
     */
    public StudentExpenseTracker() {
        initComponents();  
        expenses = new ArrayList<Expenses>();
        populateArrayList();
    }
    
    public void populateArrayList(){
        try{
            BufferedReader reader = new BufferedReader(new FileReader("expense.txt"));
            
            String line;
            
            while((line = reader.readLine()) != null){
                //expense type,amount
                String[] parts = line.split(",");
                if(parts.length == 3){
                    String month = parts[0];
                    String expTyp = parts[1];
                    double amount = Double.parseDouble(parts[2]);
                    
                    Expenses exp = new Expenses(month,expTyp, amount);
                    expenses.add(exp);
                }
            }
            reader.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
        }catch(Exception f){
            JOptionPane.showMessageDialog(getContentPane(), f.getMessage());
        }
    }
    
    public void saveExpensesToFile(){
        try{
            BufferedWriter writer = new BufferedWriter(new FileWriter("expense.txt"));
            
            for(int i = 0 ; i < expenses.size();i++){
                Expenses exp = expenses.get(i);
                //since expenses has getExpName and getExpAmount
                String line = exp.getMonth() + "," + exp.getExpenseName() + "," + exp.getExpenseAmount();
                writer.write(line);
                writer.newLine();//move to next line
                
            }
            writer.close();
            JOptionPane.showMessageDialog(getContentPane(), "Expense successfully added");
        }catch(IOException e){
            JOptionPane.showMessageDialog(getContentPane(), e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        monthLBL = new javax.swing.JLabel();
        month = new javax.swing.JTextField();
        amount = new javax.swing.JLabel();
        expensName = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        addExp = new javax.swing.JButton();
        readAll = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        expName = new javax.swing.JLabel();
        expensAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(749, 320));
        setPreferredSize(new java.awt.Dimension(802, 368));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Track your expenses by entering the details below...");

        monthLBL.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        monthLBL.setText("Month");

        month.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthActionPerformed(evt);
            }
        });

        amount.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        amount.setText("Amount:");

        expensName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        expensName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expensNameActionPerformed(evt);
            }
        });

        save.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        addExp.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addExp.setText("Add expense");
        addExp.setActionCommand("");
        addExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExpActionPerformed(evt);
            }
        });

        readAll.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        readAll.setText("Read all expenses");
        readAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readAllActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        clear.setText("Clear details");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        expName.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        expName.setText("Expense type:");

        expensAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(save)
                                .addGap(28, 28, 28)
                                .addComponent(addExp)
                                .addGap(27, 27, 27)
                                .addComponent(readAll)
                                .addGap(28, 28, 28)
                                .addComponent(clear))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(amount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(monthLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(expName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(month)
                                    .addComponent(expensName, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                                    .addComponent(expensAmount))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expensName, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expensAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(addExp)
                    .addComponent(readAll)
                    .addComponent(clear))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExpActionPerformed
        // TODO add your handling code here:
        //make sure user types details
        if(month.getText().isEmpty() || expensName.getText().isEmpty() || expensAmount.getText().isEmpty()){
            JOptionPane.showMessageDialog(getContentPane(), "Please enter all fields");
        }else{
             //get the expense details.
        String mont = month.getText().trim();
        String expName = expensName.getText().trim();
        double expAmnt = Double.parseDouble(expensAmount.getText().trim());
        //create expense object
            Expenses exp = new Expenses(mont,expName, expAmnt);
        //add to expenses list
        expenses.add(exp);
        saveExpensesToFile();
        }
        //month.setText("");
        expensName.setText("");
        expensAmount.setText("");
    }//GEN-LAST:event_addExpActionPerformed

    private void readAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readAllActionPerformed
      // Get input from text fields
    String mon = month.getText().trim();
    String message = "";

    // Build the message header
    message += "Your expenses are as follows:\n\n";

    // Use a Map to store expenses by month
    Map<String, List<String>> monthExpenses = new HashMap<>();

    try {
        // Read the file
        BufferedReader reader = new BufferedReader(new FileReader("expense.txt"));
        String line;

        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(",");
            
            if (parts.length == 3) {
                String entryMonth = parts[0];
                String expName = parts[1];
                double expAmount = Double.parseDouble(parts[2]);

                // Check if the month already exists in the map
                if (!monthExpenses.containsKey(entryMonth)) {
                    // If it doesn't exist, create a new list for that month
                    monthExpenses.put(entryMonth, new ArrayList<>());
                }

                // Add the expense to the list for that month
                monthExpenses.get(entryMonth).add(expName + " = R" + expAmount);
            }
        }

        reader.close();

        // Now, format the message for each month
        for (Map.Entry<String, List<String>> entry : monthExpenses.entrySet()) {
            String month = entry.getKey();
            List<String> expenses = entry.getValue();

            message += month + "\n\n";
            for (String expense : expenses) {
                message += expense + "\n";
            }

            // Calculate total for the current month
            double totalAmount = 0;
            for (String expense : expenses) {
                String[] parts = expense.split(" = R");
                if (parts.length == 2) {
                    totalAmount += Double.parseDouble(parts[1]);
                }
            }

            message += "Your total is R" + totalAmount + "\n\n";
        }

        // Pass the message to the DisplayExpenses frame
        DisplayExpenses display = new DisplayExpenses();
        display.setExpensesText(message);  // Set the message to the text area
        display.setVisible(true);  // Show the frame

    } catch (IOException e) {
        // Show error dialog if file reading fails
        JOptionPane.showMessageDialog(getContentPane(), "Error reading the file: " + e.getMessage());
    }

    }//GEN-LAST:event_readAllActionPerformed

    private void monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthActionPerformed

    private void expensNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expensNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expensNameActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        try {
        // Open the file
        FileWriter writer = new FileWriter("expense.txt");
        writer.write(""); // Write empty string to clear the file
        writer.close(); // Close the file
        
        
        JOptionPane.showMessageDialog(getContentPane(), "Expense file cleared successfully.");
        
    } catch (IOException e) {
        
        JOptionPane.showMessageDialog(getContentPane(), "Error clearing the file: " + e.getMessage());
    }
    }//GEN-LAST:event_clearActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        month.setText("");
        expensName.setText("");
        expensAmount.setText("");
        //this.dispose();
    }//GEN-LAST:event_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentExpenseTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentExpenseTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentExpenseTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentExpenseTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentExpenseTracker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addExp;
    private javax.swing.JLabel amount;
    private javax.swing.JButton clear;
    private javax.swing.JLabel expName;
    private javax.swing.JTextField expensAmount;
    private javax.swing.JTextField expensName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField month;
    private javax.swing.JLabel monthLBL;
    private javax.swing.JButton readAll;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
